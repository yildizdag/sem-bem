function [Ka, Ma, sem_mesh] = Boundary_Conditions_Application(Ka, Ma,...
    sem_mesh, BC)
% -------------------------------------------------------------------------
% This function applies boundary conditions to the assembled system matrices
% (Ka and Ma) and updates the mesh structure (sem_mesh) accordingly.
%
% Inputs:
%   Ka, Ma     : Global stiffness and mass matrices
%   sem_mesh   : Struct containing mesh, DOF, and geometry information
%   BC         : Struct containing boundary conditions:
%                - BC.edgenodes: edges with boundary conditions
%                - BC.fixeddofs: which DOFs to constrain on those edges
%
% Outputs:
%   Ka_mod, Ma_mod : Modified global matrices after BC application
%   sem_mesh       : Updated mesh structure with fixed DOF indicators
% -------------------------------------------------------------------------


% Initialize logical index vector for constrained DOFs
indC = false(size(sem_mesh.ind_ALL, 1), 1);

% Loop over all boundary-condition-defined edges
for di1 = 1:size(BC.edgenodes,1)

    % Identify the current edge in the mesh
    edgenow = (sem_mesh.edges(:,1) == BC.edgenodes(di1,1)) & ...
              (sem_mesh.edges(:,2) == BC.edgenodes(di1,2));

    % Collect interior sampling points on the edge
    edgepointsnow = sem_mesh.edgepoints(edgenow,:);
    edgepointsnow = edgepointsnow(edgepointsnow > 0);  % Removes all zeros

    % Collect corner sampling points (nodes) for the edge
    nodepointsnow = sem_mesh.nodepoints(BC.edgenodes(di1,:))';

    % Combine corner and interior sampling points for DOF marking
    edgenodepointsnow = [nodepointsnow(1) edgepointsnow nodepointsnow(2)];

    % Vectorized marking of fixed DOFs for current edge
    isOnEdge = ismember(sem_mesh.ind_ALL(:,3), edgenodepointsnow);
    if ~isempty(BC.fixeddofs) && size(BC.fixeddofs, 2) >= 5
        for dof = 1:5
            if BC.fixeddofs(di1, dof)
                indC = indC | (isOnEdge & (sem_mesh.ind_ALL(:,1) == dof));
            end
        end
    end

end

% Store fixed DOF flags in sem_mesh for future reference
sem_mesh.ind_ALL(:,4) = indC;
clear indC

% -------------------------------------------------------------------------
% Additional processing for Simply Supported edges with one rotational DOF
% -------------------------------------------------------------------------

% Identify edges with only one of (phi_x, phi_y) fixed
SS_ind = find(sum(BC.fixeddofs(:,4:5),2) == 1);

% Initialize containers for geometry and normal components
x = []; y = []; n1 = []; n2 = [];
phi_x_index = []; phi_y_index = [];

% Loop through simply supported edges
for di1 = 1:length(SS_ind) 

    % Locate the edge
    edgenow = (sem_mesh.edges(:,1) == BC.edgenodes(SS_ind(di1),1)) & ...
              (sem_mesh.edges(:,2) == BC.edgenodes(SS_ind(di1),2));

    % Extract interior sampling points
    edgepointsnow = sem_mesh.edgepoints(edgenow,:);
    edgepointsnow = edgepointsnow(edgepointsnow > 0);  % Removes all zeros

    % Identify the edge corner sampling points
    nodepointsnow = sem_mesh.nodepoints(BC.edgenodes(SS_ind(di1),:))';

    % Combining the corner and inner sampling points
    edgenodepointsnow = [nodepointsnow(1) edgepointsnow nodepointsnow(2)];

    % Collect indices for phi_x and phi_y DOFs on the edge
    for di2 = 1:length(edgenodepointsnow)
        inds_edgenodepointsnow = find(sem_mesh.ind_ALL(:,3) == edgenodepointsnow(di2));
        phi_x_index = [phi_x_index; inds_edgenodepointsnow(sem_mesh.ind_ALL(inds_edgenodepointsnow,1) == 4)];
        phi_y_index = [phi_y_index; inds_edgenodepointsnow(sem_mesh.ind_ALL(inds_edgenodepointsnow,1) == 5)];
    end

    % Get x-y coordinates of the current edge’s sampling points
    pos = sem_mesh.posn(edgenodepointsnow, :);
    xnow = pos(:,1);
    ynow = pos(:,2);
    x = [x;xnow];
    y = [y;ynow];

    % Calculate edge tangents using coordinate gradients
    dx = gradient(xnow);
    dy = gradient(ynow);
    tmag = sqrt(dx.^2 + dy.^2);
    tx = dx ./ tmag;
    ty = dy ./ tmag;

    % Normal components (perpendicular to tangents)
    n1 = [n1; ty];  % sin(theta)
    n2 = [n2; tx];  % cos(theta)
end


ia = 1:numel(n1);
n1 = n1(ia); % sin(theta)
n2 = n2(ia); % cos(theta)

% % Plotting edge normals for verification
% plot_edges(sem_mesh.group_ind, sem_mesh.posn, sem_mesh.elementpoints)
% quiver(x(ia), y(ia), -n1, n2,'r')  % Normals
% hold off

% -------------------------------------------------------------------------
% Coordinate transformation for rotational DOFs (phi_x, phi_y → phi_n, phi_t)
% -------------------------------------------------------------------------

% Construct transformation matrix for rotational DOFs
% (transform phi_x - phi_y to phi_n - phi_t)
T = speye(size(Ka,1));
T([phi_x_index, phi_y_index],[phi_x_index, phi_y_index]) = ...
    [diag(-n2),diag(-n1);
     diag(-n1),diag(n2)];

% Apply coordinate transformation to global matrices
Ka = T'*Ka*T;
Ma = T'*Ma*T;

% -------------------------------------------------------------------------
% Remove constrained DOFs and update mesh
% -------------------------------------------------------------------------

bc_ind = find(sem_mesh.ind_ALL(:,4)==1);
Ka(bc_ind,:) = [];
Ka(:,bc_ind) = [];
Ma(bc_ind,:) = [];
Ma(:,bc_ind) = [];

sem_mesh.ind_ALL(bc_ind,:) = [];
sem_mesh.posn(bc_ind,:) = [];


end

